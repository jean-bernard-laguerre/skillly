package main

import (
	"github.com/joho/godotenv"

	"github.com/gin-contrib/cors"

	"github.com/gin-gonic/gin"

	"skillly/chat"
	chatDB "skillly/chat/db"
	messageHandler "skillly/chat/handlers/message"
	chatModels "skillly/chat/models"

	"skillly/pkg/db"
	"skillly/pkg/handlers"

	// Swagger imports
	_ "skillly/docs" // This will be generated by swag init

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Skillly API
// @version 1.0
// @description API pour l'application Skillly - plateforme de matching entre candidats et recruteurs
// @termsOfService http://swagger.io/terms/

// @contact.name Support API
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {

	_ = godotenv.Load()

	// Init the database
	db.SetupDB()
	chatDB.SetupDB()

	// Create a new gin router
	r := gin.Default()
	// Create a new chat hub
	hub := chatModels.NewHub()
	go hub.RunHub()

	r.Use(cors.New(cors.Config{
		AllowOrigins: []string{"*"},
	}))

	// Add routes
	handlers.AddRoutes(r)
	messageHandler.AddRoutes(r)

	// Swagger route
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// @Summary Hello World
	// @Description Endpoint de test pour vérifier que l'API fonctionne
	// @Tags test
	// @Accept json
	// @Produce json
	// @Success 200 {object} map[string]string
	// @Router / [get]
	r.GET("/", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "Hello, World!",
		})
	})

	// @Summary WebSocket Connection
	// @Description Établit une connexion WebSocket pour le chat en temps réel
	// @Tags websocket
	// @Param roomId path string true "ID de la room de chat"
	// @Router /ws/{roomId} [get]
	r.GET("/ws/:roomId", func(c *gin.Context) {
		roomId := c.Param("roomId")

		chat.ServeWs(hub, roomId, c.Writer, c.Request)
	})

	// @Summary Global WebSocket Connection
	// @Description Établit une connexion WebSocket globale pour recevoir tous les messages de l'utilisateur
	// @Tags websocket
	// @Param userId path string true "ID de l'utilisateur"
	// @Router /ws/user/{userId} [get]
	r.GET("/ws/user/:userId", func(c *gin.Context) {
		userID := c.Param("userId")
		chat.ServeGlobalWs(userID, c.Writer, c.Request)
	})

	r.Run(":8080")

	// Create a new websocket connection

}
