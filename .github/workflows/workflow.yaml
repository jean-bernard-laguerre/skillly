name: Pipeline CI/CD
on:
  pull_request:
    branches:
      - master
      - main
  push:
    branches:
      - main

jobs:
  #  RUN GO TEST
  run-go-test:
    outputs:
      outcome: ${{job.status}}
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.4
        ports:
          - "3308:5432"
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: skilly_test
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:latest
        ports:
          - "27018:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
          MONGO_INITDB_DATABASE: skilly_test
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.1

      - name: Install dependencies
        run: go mod tidy
        working-directory: ./back

      - name: Create empty .env file
        run: touch .env
        working-directory: ./back

      - name: Install mongosh
        run: |
          sudo apt-get install gnupg
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      - name: Initalize MongoDB
        run: |
          mongosh --host localhost:27018 -u root -p root --authenticationDatabase admin <<EOF
            db = db.getSiblingDB('skilly_test');
            db.createUser({ user: 'test', pwd: 'test', roles: [{ role: 'readWrite', db: 'skilly_test' }] })
            db.createCollection('room');
            db.createCollection('message');
            db.room.InsertOne({name: 'test_room'});
          EOF

      - name: Run tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 3308
          TEST_DB_USER: root
          TEST_DB_PASSWORD: root
          TEST_DB_NAME: skilly_test
          MONGO_URI: mongodb://localhost:27018/
        run: go test -v ./test
        working-directory: ./back

  # GET REPO NAME
  get-repo-name:
    runs-on: ubuntu-latest
    outputs:
      repo-name: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get repo name
        run: echo "Repo name is ${{ github.repository }}"

        id: get-repo-name
        # This is the output variable
        # We can access this variable in other jobs using `needs.get-repo-name.outputs.repo-name`
