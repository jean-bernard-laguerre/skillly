name: Pipeline SKILLLY CI/CD
on:
  pull_request:
    branches:
      - master
      - main
  push:
    branches:
      - main

jobs:
  # GET USER INFOS
  get-user-infos:
    # récupérer les infos de l'utilisateur venant du repo
    needs: get-repo-name
    runs-on: ubuntu-latest
    outputs:
      user: ${{ github.actor }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get user infos
        run: echo "User infos are ${{ github.actor }}"
        id: get-user-infos

  # GET REPO NAME
  get-repo-name:
    runs-on: ubuntu-latest
    outputs:
      repo-name: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get repo name
        run: echo "Repo name is ${{ github.repository }}"

        id: get-repo-name
        # This is the output variable
        # We can access this variable in other jobs using `needs.get-repo-name.outputs.repo-name`

  #  RUN GO TEST
  run-go-test:
    outputs:
      outcome: ${{job.status}}
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.4
        ports:
          - "3308:5432"
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: skilly_test
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:latest
        ports:
          - "27018:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
          MONGO_INITDB_DATABASE: skilly_test
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.1

      - name: Install dependencies
        run: go mod tidy
        working-directory: ./back

      - name: Create MongoDB collections
        run: |
          docker exec $(docker ps -qf "ancestor=mongo:latest") mongosh -u root -p root --authenticationDatabase admin --eval "
            db = db.getSiblingDB('skilly_test');
            db.createCollection('room');
            db.createCollection('message');
            db.room.insertOne({ name: 'test_room', _init: true });
            db.message.insertOne({ _init: true });"

      - name: Create empty .env file
        run: touch .env
        working-directory: ./back

      - name: Run tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 3308
          TEST_DB_USER: root
          TEST_DB_PASSWORD: root
          TEST_DB_NAME: skilly_test
          DB_NAME: skillly_test
          MONGO_URI: mongodb://localhost:27018/
          JWT_SECRET: test_secret
        run: go test -v ./test
        working-directory: ./back

  # BUILD AND PUSH DOCKER IMAGES
  build-and-push:
    needs: run-go-test
    runs-on: ubuntu-latest
    if: success() # Only run this job if the previous job was successful

    steps:
      # 1. Checkout du code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 3. Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build et push de l'image back
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: ./back
          file: ./back/Dockerfile.prod
          push: true
          tags: ghcr.io/${{ github.repository }}/back:latest

  # SEND MESSAGE
  send-chat:
    needs: [get-repo-name, get-user-infos, run-go-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        env:
          CHAT_LINK: ${{ secrets.CHAT_LINK }}

      - name: Google Chat Notification Action
        uses: SimonScholz/google-chat-action@v1.1.0
        with:
          webhookUrl: "${{ secrets.CHAT_LINK }}"
          jobStatus: ${{ needs.run-go-test.outputs.outcome }}
          title: "${{ needs.get-user-infos.outputs.user }} a créé une pull request"
          subtitle: "Pull Request sur le main || repo: ${{ needs.get-repo-name.outputs.repo-name }}"
          imageUrl: "https://github.com/${{ needs.get-user-infos.outputs.user }}.png?size=200"
          imageType: Circle
          # additionalSections: '[{"header": "Additional Section", "collapsible": true, "widgets": [{"decoratedText": {"startIcon": {"knownIcon": "STAR"},"text": "Additional Section"}}] }]'
          additionalSections: '[{"header": "Information", "collapsible": true, "widgets": [{"decoratedText": {"text": "Pull Request sur le main"}}]},{"header": "Action", "collapsible": false, "widgets": [{"decoratedText": {"text": "TEST"}}]}]'
